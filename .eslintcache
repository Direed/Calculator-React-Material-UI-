[{"D:\\ReactProject\\calculator\\src\\index.js":"1","D:\\ReactProject\\calculator\\src\\App.js":"2","D:\\ReactProject\\calculator\\src\\reportWebVitals.js":"3","D:\\ReactProject\\calculator\\src\\components\\Calculator.js":"4","D:\\ReactProject\\calculator\\src\\components\\Buttons.js":"5","D:\\ReactProject\\calculator\\src\\components\\EntryField.js":"6","D:\\ReactProject\\calculator\\src\\components\\Story.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":6965,"mtime":1618257419913,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":11858,"mtime":1618484056910,"results":"12","hashOfConfig":"9"},{"size":1357,"mtime":1615022371753,"results":"13","hashOfConfig":"9"},{"size":1145,"mtime":1618080417012,"results":"14","hashOfConfig":"9"},{"size":4062,"mtime":1618687374426,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"79vpg4",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\ReactProject\\calculator\\src\\index.js",[],["33","34"],"D:\\ReactProject\\calculator\\src\\App.js",["35","36"],"import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { withStyles } from '@material-ui/core/styles';\nimport Box from \"@material-ui/core/Box\";\nimport Switch from \"@material-ui/core/Switch\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport Calculator from \"./components/Calculator\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n        border: 0,\n        borderRadius: 3,\n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n        color: 'white',\n        height: 48,\n        padding: '0 30px',\n    },\n    header: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"60px\",\n        backgroundColor: \"#FF8181\",\n        margin: \"none\",\n    },\n    header_dark_theme: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"60px\",\n        backgroundColor: \"#505050\",\n        margin: \"none\",\n    },\n    time: {\n        color: \"#000000\",\n    },\n    time_dark_theme: {\n        color: \"#ffffff\",\n    },\n    mainText: {\n        paddingLeft: \"15px\",\n        paddingRight: \"15px\",\n        color: \"#000000\",\n    },\n    mainText_dark_theme: {\n        paddingLeft: \"15px\",\n        paddingRight: \"15px\",\n        color: \"#ffffff\",\n    },\n    buttons: {\n        display: 'grid',\n        gridTemplateColumns: \"80px 80px 80px 80px\",\n        justifyItems: \"center\",\n        alignItems: 'center',\n    },\n    button: {\n        width: '50px',\n        height: '50px',\n        margin: \"5px 0 5px 0\",\n    },\n    field: {\n        width: '350px',\n    },\n    box: {\n        display: 'flex',\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    menu: {\n        backgroundColor: \"#FF8181\",\n        boxShadow: \"none\",\n        paddingBottom: theme.spacing(2),\n    },\n    menu_dark_theme: {\n        backgroundColor: \"#505050\",\n        boxShadow: \"none\",\n        paddingBottom: theme.spacing(2),\n    },\n    menuButton: {\n        marginRight: theme.spacing(0),\n        marginLeft: theme.spacing(1),\n        backgroundColor: \"#FF8181\",\n        color: \"#000000\"\n    },\n    menuButton_dark_theme: {\n        marginRight: theme.spacing(0),\n        marginLeft: theme.spacing(1),\n        backgroundColor: \"#505050\",\n        color: \"#ffffff\",\n    },\n    title: {\n        flexGrow: 1,\n        backgroundColor: \"#FF8181\",\n        color: \"#000000\",\n    },\n    title_dark_theme: {\n        flexGrow: 1,\n        backgroundColor: \"#505050\",\n        color: \"#ffffff\",\n    },\n}));\n\nconst StandartSwitch = withStyles({\n    switchBase: {\n        color: \"black\",\n        \"&$checked\": {\n            color: \"yellow\"\n        },\n        \"&$checked + $track\": {\n            backgroundColor: \"#C4C4C4\"\n        }\n    },\n    checked: {},\n    track: {}\n})(Switch);\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.enterSwitch = this.enterSwitch.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.state = {\n            date : new Date(),\n            checkedSwitch: false,\n            anchorEl: null,\n        }\n    }\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        );\n    }\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n    tick(){\n        this.setState({\n            date: new Date(),\n        })\n    }\n    enterSwitch(){\n        if(this.state.checkedSwitch === false){\n            this.setState({\n                checkedSwitch: true,\n            })\n        } else {\n            this.setState({\n                    checkedSwitch: false,\n                })\n        }\n    }\n\n    handleClick(event){\n        this.setState({\n            anchorEl: event.currentTarget,\n        })\n    }\n    handleClose(){\n        this.setState({\n            anchorEl: null,\n        })\n    }\n\n\n\n    render() {\n        return (\n            <div>\n                <Header date = {this.state.date} checkedSwitch={this.state.checkedSwitch} changeSwitch={this.enterSwitch}/>\n                <NavBar checkedSwitch={this.state.checkedSwitch} anchorEl={this.state.anchorEl} handleClick={this.handleClick} handleClose={this.handleClose}></NavBar>\n                <Calculator checkedSwitch={this.state.checkedSwitch}></Calculator>\n            </div>\n        );\n    }\n}\nfunction Header(props) {\n    const classes = useStyles();\n    const headerClass = props.checkedSwitch ? classes.header_dark_theme : classes.header;\n    const mainTextClass = props.checkedSwitch ? classes.mainText_dark_theme : classes.mainText;\n    const timeClass = props.checkedSwitch ? classes.time_dark_theme : classes.time;\n    return (\n        <Box className={headerClass}>\n            <StandartSwitch checked={props.checkedSwitch} name=\"switchBase\" onChange={props.changeSwitch}></StandartSwitch>\n            <h1 className={mainTextClass}>CALCULATOR</h1>\n            <h3 className={timeClass} >{props.date.toLocaleTimeString(navigator.language,{hour: '2-digit', minute:'2-digit'})}</h3>\n        </Box>\n    );\n}\n\nfunction NavBar(props) {\n    const classes = useStyles();\n    const menuClass = props.checkedSwitch ? classes.menu_dark_theme : classes.menu;\n    const menuButtonClass = props.checkedSwitch ? classes.menuButton_dark_theme : classes.menuButton;\n    const titleClass = props.checkedSwitch ? classes.title_dark_theme : classes.title;\n    return (\n            <AppBar position=\"static\" className={menuClass}>\n                <Toolbar>\n                    <IconButton edge=\"start\" className={menuButtonClass} color=\"inherit\" aria-label=\"menu\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={props.handleClick}>\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={titleClass}>\n                        Simple\n                    </Typography>\n                </Toolbar>\n                <Menu id=\"simple-menu\" anchorEl={props.anchorEl} keepMounted open={Boolean(props.anchorEl)} onClose={props.handleClose}>\n                    <MenuItem onClick={props.handleClose}>Simple</MenuItem>\n                    <MenuItem onClick={props.handleClose}>Engineering</MenuItem>\n                    <MenuItem onClick={props.handleClose}>Programmer</MenuItem>\n                </Menu>\n            </AppBar>\n    );\n}\nexport default App;\n","D:\\ReactProject\\calculator\\src\\reportWebVitals.js",[],"D:\\ReactProject\\calculator\\src\\components\\Calculator.js",["37","38","39","40","41","42","43","44","45"],"import React from 'react';\r\nimport EntryField from \"./EntryField\";\r\nimport Buttons from \"./Buttons\";\r\nimport Story from \"./Story\";\r\nimport ReactDOM from 'react-dom';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = {\r\n    box: {\r\n        display: 'flex',\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        backgroundColor: \"#FF8181\",\r\n    },\r\n    box_dark_theme: {\r\n        display: 'flex',\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        backgroundColor: \"#505050\",\r\n    },\r\n    story: {\r\n        backgroundColor: \"#FF8181\",\r\n    },\r\n    story_dark_theme: {\r\n        backgroundColor: \"#505050\",\r\n    },\r\n    containerForField: {\r\n        display: 'flex',\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        backgroundColor: \"#FF8181\",\r\n    },\r\n    containerForField_dark_theme: {\r\n        display: 'flex',\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        backgroundColor: \"#505050\",\r\n    },\r\n    entryField: {\r\n        borderRadius: \"15%\",\r\n    }\r\n};\r\n\r\n\r\nclass Calculator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.changeValueWithButton = this.changeValueWithButton.bind(this);\r\n        this.doingOperation = this.doingOperation.bind(this);\r\n        this.state = {\r\n            value: '',\r\n            number: 0,\r\n            firstValue: 0,\r\n            secondValue: 1,\r\n            lastOperation: '',\r\n            statusCalculator: 'sleep',\r\n            masButton: ['CE','x^2', '%', '/', 7,8,9,'*',4,5,6,'-',1,2,3,'+','+/-',0,'.','='],\r\n            strCalculation: '',\r\n            masCalculations: [],\r\n        }\r\n    }\r\n\r\n    doingOperation(e){\r\n        switch (e.currentTarget.value) {\r\n            case \"CE\":\r\n                this.setState({\r\n                    value: '',\r\n                    lastOperation: '',\r\n                })\r\n                break;\r\n            case \"x^2\":\r\n                this.setState((state) => {\r\n                    return {\r\n                        firstValue: Math.pow(state.value, 2),\r\n                    }});\r\n                this.setState((state) => {\r\n                    return {\r\n                        value: state.firstValue,\r\n                    }});\r\n                this.setState({\r\n                    lastOperation: '',\r\n                })\r\n                break;\r\n            case \"%\":\r\n                this.setState((state) => {\r\n                    return {\r\n                        firstValue: state.value/100,\r\n                    }\r\n                })\r\n                this.setState((state) => {\r\n                    return {\r\n                        value: state.firstValue,\r\n                    }\r\n                })\r\n                this.setState({\r\n                    lastOperation: '',\r\n                })\r\n                break;\r\n            case \"/\":\r\n                this.analiseOperation(this.state.lastOperation)\r\n                this.setState({\r\n                    lastOperation: e.currentTarget.value,\r\n                    statusCalculator: 'work',\r\n                })\r\n                break;\r\n            case \"*\":\r\n                this.analiseOperation(this.state.lastOperation)\r\n                this.setState({\r\n                    lastOperation: e.currentTarget.value,\r\n                    statusCalculator: 'work',\r\n                })\r\n                break;\r\n            case \"-\":\r\n                this.analiseOperation(this.state.lastOperation)\r\n                this.setState({\r\n                    lastOperation: e.currentTarget.value,\r\n                    statusCalculator: 'work',\r\n                })\r\n                break;\r\n            case \"+\":\r\n                this.analiseOperation(this.state.lastOperation)\r\n                this.setState({\r\n                    lastOperation: e.currentTarget.value,\r\n                    statusCalculator: 'work',\r\n                })\r\n                this.setState((state) => {\r\n                    return {\r\n                    strCalculation: state.strCalculation + ' ' + state.lastOperation + ' ',\r\n                    }\r\n                })\r\n                break;\r\n            case \"+/-\":\r\n\r\n                break;\r\n            case \".\":\r\n\r\n                break;\r\n            case \"=\":\r\n                if(this.state.lastOperation!=''){\r\n                    switch(this.state.lastOperation){\r\n                        case '/':\r\n                            this.setState((state) => {\r\n                                return {\r\n                                    firstValue: state.firstValue / state.value,\r\n                                }\r\n                            })\r\n                            this.setState((state) => {\r\n                                return {\r\n                                    value: state.firstValue,\r\n                                }\r\n                            })\r\n                            break;\r\n                        case '*':\r\n                            this.setState((state) => {\r\n                                return {\r\n                                    firstValue: state.firstValue * state.value,\r\n                                }\r\n                            })\r\n                            this.setState((state) => {\r\n                                return {\r\n                                    value: state.firstValue,\r\n                                }\r\n                            })\r\n                            break;\r\n                        case '-':\r\n                            this.setState((state) => {\r\n                                return {\r\n                                    firstValue: state.firstValue - state.value,\r\n                                }\r\n                            })\r\n                            this.setState((state) => {\r\n                                return {\r\n                                    value: state.firstValue,\r\n                                }\r\n                            })\r\n                            break;\r\n                        case '+':\r\n                            this.setState((state) => {\r\n                                return {\r\n                                    firstValue: Number(state.firstValue) + Number(state.value),\r\n                                }\r\n                            })\r\n                            this.setState((state) => {\r\n                                return {\r\n                                    strCalculation: state.strCalculation + state.value + ' = ' + state.firstValue,\r\n                                    value: state.firstValue,\r\n                                }\r\n                            })\r\n                            this.setState((state) => {\r\n                                return {\r\n                                    masCalculations: [...state.masCalculations, state.strCalculation],\r\n                                    strCalculation: '',\r\n                                }\r\n                            })\r\n                            console.log(this.state.strCalculation);\r\n                            break;\r\n                    }\r\n                } else {\r\n                    this.setState((state) => {\r\n                        return {\r\n                            firstValue: state.value,\r\n                        }\r\n                    })\r\n                }\r\n                this.setState({\r\n                    lastOperation: '',\r\n                })\r\n                break;\r\n        }\r\n    }\r\n\r\n    analiseOperation(lastOperation){\r\n        if(lastOperation!=''){\r\n            switch(lastOperation){\r\n                case '/':\r\n                    this.setState((state) => {\r\n                        return {\r\n                            firstValue: state.firstValue / state.value,\r\n                        }\r\n                    })\r\n                    this.setState((state) => {\r\n                        return {\r\n                            value: state.firstValue,\r\n                        }\r\n                    })\r\n                    break;\r\n                case '*':\r\n                    this.setState((state) => {\r\n                        return {\r\n                            firstValue: state.firstValue * state.value,\r\n                        }\r\n                    })\r\n                    this.setState((state) => {\r\n                        return {\r\n                            value: state.firstValue,\r\n                        }\r\n                    })\r\n                    break;\r\n                case '-':\r\n                    this.setState((state) => {\r\n                        return {\r\n                            firstValue: state.firstValue - state.value,\r\n                        }\r\n                    })\r\n                    this.setState((state) => {\r\n                        return {\r\n                            value: state.firstValue,\r\n                        }\r\n                    })\r\n                    break;\r\n                case '+':\r\n                    this.setState((state) => {\r\n                        return {\r\n                            firstValue: Number(state.firstValue) + Number(state.value),\r\n                            strCalculation: state.strCalculation + state.value,\r\n                        }\r\n                    })\r\n                    this.setState((state) => {\r\n                        return {\r\n                            value: state.firstValue,\r\n                        }\r\n                    })\r\n                    break;\r\n            }\r\n        } else {\r\n            this.setState((state) => {\r\n                return {\r\n                    firstValue: state.value,\r\n                    strCalculation: state.strCalculation + state.value,\r\n                }\r\n            })\r\n            this.setState({\r\n                value: '',\r\n            })\r\n        }\r\n    }\r\n\r\n    changeValueWithButton(e){\r\n        this.setState({number: e.currentTarget.value})\r\n        if(this.state.statusCalculator === 'sleep'){\r\n            this.setState((state) => {\r\n                return {\r\n                    value: state.value + state.number,\r\n                }});\r\n        } else {\r\n            this.setState({\r\n                value: '',\r\n                statusCalculator: 'sleep',\r\n            })\r\n            this.setState((state) => {\r\n                return {\r\n                    value: state.value + state.number,\r\n                }});\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        // eslint-disable-next-line react-hooks/rules-of-hooks\r\n        const { classes } = this.props;\r\n        const masButton = this.state.masButton;\r\n        const values = this.state.value;\r\n        const boxClass = this.props.checkedSwitch ? classes.box_dark_theme : classes.box;\r\n        const containerForFieldClass = this.props.checkedSwitch ? classes.containerForField_dark_theme : classes.containerForField;\r\n        const storyClass = this.props.checkedSwitch ? classes.story_dark_theme : classes.story;\r\n        return(\r\n            <Box className={boxClass}>\r\n            <Box className={containerForFieldClass}>\r\n                <EntryField values = {values}></EntryField>\r\n                <Buttons values = {values} masButton = {masButton} changeValueWithButton={this.changeValueWithButton} doingOperation={this.doingOperation}></Buttons>\r\n            </Box>\r\n            <Box className={storyClass}>\r\n                <Story checkedSwitch={this.props.checkedSwitch} masCalculations = {this.state.masCalculations} ></Story>\r\n            </Box>\r\n            </Box>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(Calculator);","D:\\ReactProject\\calculator\\src\\components\\Buttons.js",[],"D:\\ReactProject\\calculator\\src\\components\\EntryField.js",[],"D:\\ReactProject\\calculator\\src\\components\\Story.js",["46","47","48"],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":8,"nodeType":"55","messageId":"56","endLine":1,"endColumn":12},{"ruleId":"53","severity":1,"message":"57","line":13,"column":8,"nodeType":"55","messageId":"56","endLine":13,"endColumn":14},{"ruleId":"53","severity":1,"message":"58","line":5,"column":8,"nodeType":"55","messageId":"56","endLine":5,"endColumn":16},{"ruleId":"53","severity":1,"message":"59","line":7,"column":8,"nodeType":"55","messageId":"56","endLine":7,"endColumn":17},{"ruleId":"53","severity":1,"message":"57","line":8,"column":8,"nodeType":"55","messageId":"56","endLine":8,"endColumn":14},{"ruleId":"53","severity":1,"message":"60","line":10,"column":8,"nodeType":"55","messageId":"56","endLine":10,"endColumn":17},{"ruleId":"61","severity":1,"message":"62","line":70,"column":9,"nodeType":"63","messageId":"64","endLine":215,"endColumn":10},{"ruleId":"65","severity":1,"message":"66","line":145,"column":44,"nodeType":"67","messageId":"68","endLine":145,"endColumn":46},{"ruleId":"61","severity":1,"message":"62","line":146,"column":21,"nodeType":"63","messageId":"64","endLine":203,"endColumn":22},{"ruleId":"65","severity":1,"message":"66","line":219,"column":25,"nodeType":"67","messageId":"68","endLine":219,"endColumn":27},{"ruleId":"61","severity":1,"message":"62","line":220,"column":13,"nodeType":"63","messageId":"64","endLine":270,"endColumn":14},{"ruleId":"53","severity":1,"message":"69","line":2,"column":8,"nodeType":"55","messageId":"56","endLine":2,"endColumn":11},{"ruleId":"53","severity":1,"message":"70","line":4,"column":10,"nodeType":"55","messageId":"56","endLine":4,"endColumn":20},{"ruleId":"71","severity":1,"message":"72","line":73,"column":5,"nodeType":"73","messageId":"74","endLine":75,"endColumn":6},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'ReactDOM' is defined but never used.","'Container' is defined but never used.","'TextField' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Box' is defined but never used.","'withStyles' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]